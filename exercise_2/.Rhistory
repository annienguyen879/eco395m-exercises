ematup = apply(days_out,1,FUN=forerror,forecast_df=Hup)
equanup = apply(ematup,2,quantile,probs=c(.25,.75),na.rm=T)
ematdown = apply(days_out,1,FUN=forerror,forecast_df=Hdown)
equandown = apply(ematdown,2,quantile,probs=c(.25,.75),na.rm=T)
ymax_errorfig = ceiling(max(equan,equanup,equandown))
ymin_errorfig = floor(min(equan,equanup,equandown))
ylim_error = c(ymin_errorfig,ymax_errorfig)
# -------------------------
pdf('~/Desktop/code for Tarini/errors_all.pdf',height=5,width=8)
matplot(t(errors_quantiles),pch=19,type='l',lty=1,col='white',bty='n',ylim=ylim_error,ylab='error = forecast - realized',xaxt = 'n',yaxt = 'n',xlab='# days ahead')
days_seq = c(5,10,15,20)
axis(1, at = c(1,5,10,15,20),labels = c(1,5,10,15,20),lwd.ticks = 1,col.ticks = "black")
axis(1, at = 1:length(days_out),labels = rep('',length(days_out)),lwd.ticks = 1,tck=-0.01,col.ticks = "black")
axis(2,tck=-0.01)
polygon(x=c(1:20,rev(1:20)),y=c(errors_quantiles[1,],rev(errors_quantiles[2,])),col=rgb(0.8,0.8,0.8,alpha=0.7),border = F)
lines(errors_median,lty=1,col=1,lwd=2)
abline(h=0,col='red',lty=2,lwd=2)
legend('topleft',legend=c('median','IQR'),lwd=c(2,5),col=c('black',rgb(0.8,0.8,0.8,alpha=0.7)),bty='n')
dev.off()
pdf('~/Desktop/code for Tarini/regimes.pdf',height=5,width=8)
plot(H[,1],lwd=4,type='l',bty='n',xaxt='n',yaxt='n',ylab=outname,ylim=c(0,ceiling(max(H[,2:ncol(H)],na.rm=T))),xlab='')
axis(1, at = c(date_21,date_22),labels = c(2021,2022),lwd.ticks = 1,col.ticks = "black")
axis(1, at = mon_seq,labels = rep('',length(mon_seq)),lwd.ticks = 1,tck=-0.01,col.ticks = "black")
axis(2,tck=-0.01)
points(comdates,H[,1][comdates],pch=8,col='blue',cex=0.25)
segments(x0=iup,y0=0,x1=iup,y1=3000,col=rgb(0,1,0,alpha=0.3),lwd=2)
segments(x0=idown,y0=0,x1=idown,y1=3000,col=rgb(0,0,1,alpha=0.3),lwd=2)
legend('topright',legend=c('realized','rising regime','falling regime','commit date'),lty=c(1,1,1,NA),pch=c(NA,NA,NA,8),lwd=c(4,4,4,NA),bty='n',col=c('black',rgb(0,1,0,alpha=0.3),rgb(0,0,1,alpha=0.3),'blue'))
dev.off()
# pictures
pdf('~/Desktop/code for Tarini/errors_up.pdf',height=5,width=8)
days_out = as.matrix(1:20)
errors_mat = apply(days_out,1,FUN=forerror,forecast_df=Hup)
errors_median = apply(errors_mat,2,median,na.rm=T)
errors_quantiles = apply(errors_mat,2,quantile,probs=c(.25,.75),na.rm=T)
matplot(t(errors_quantiles),pch=19,type='l',lty=1,col='white',bty='n',ylim=ylim_error,ylab='error = forecast - realized',xaxt = 'n',yaxt = 'n',xlab='# days ahead')
days_seq = c(5,10,15,20)
axis(1, at = c(1,5,10,15,20),labels = c(1,5,10,15,20),lwd.ticks = 1,col.ticks = "black")
axis(1, at = 1:length(days_out),labels = rep('',length(days_out)),lwd.ticks = 1,tck=-0.01,col.ticks = "black")
axis(2,tck=-0.01)
polygon(x=c(1:20,rev(1:20)),y=c(errors_quantiles[1,],rev(errors_quantiles[2,])),col=rgb(0,1,0,alpha=0.3),border = F)
lines(errors_median,lty=1,col='dark green',lwd=2)
abline(h=0,col='red',lty=2,lwd=2)
legend('topleft',legend=c('median (rising regime)','IQR'),lwd=c(2,5),col=c('dark green',rgb(0,1,0,alpha=0.7)),bty='n')
dev.off()
pdf('~/Desktop/code for Tarini/errors_down.pdf',height=5,width=8)
days_out = as.matrix(1:20)
errors_mat = apply(days_out,1,FUN=forerror,forecast_df=Hdown)
errors_median = apply(errors_mat,2,median,na.rm=T)
errors_quantiles = apply(errors_mat,2,quantile,probs=c(.25,.75),na.rm=T)
matplot(t(errors_quantiles),pch=19,type='l',lty=1,col='white',bty='n',ylim=ylim_error,ylab='error = forecast - realized',xaxt = 'n',yaxt = 'n',xlab='# days ahead')
days_seq = c(5,10,15,20)
axis(1, at = c(1,5,10,15,20),labels = c(1,5,10,15,20),lwd.ticks = 1,col.ticks = "black")
axis(1, at = 1:length(days_out),labels = rep('',length(days_out)),lwd.ticks = 1,tck=-0.01,col.ticks = "black")
axis(2,tck=-0.01)
polygon(x=c(1:20,rev(1:20)),y=c(errors_quantiles[1,],rev(errors_quantiles[2,])),col=rgb(0,0,1,alpha=0.3),border = F)
lines(errors_median,lty=1,col='dark blue',lwd=2)
abline(h=0,col='red',lty=2,lwd=2)
legend('topleft',legend=c('median (falling regime)','IQR'),lwd=c(2,5),col=c('dark blue',rgb(0,0,1,alpha=0.7)),bty='n')
dev.off()
return(list(errors=emat,perchange=Htrue_returns))
}
# error calculations
# let's look at forecast error as a function of look ahead in # of days
forerror = function(days_out,forecast_df){
errors = c()
trues = c()
forecasts = c()
for (i in 2:(ncol(forecast_df)-1)) {
column = forecast_df[ , i]
commitdate = colnames(forecast_df)[i]
forecastdates = which(!is.na(column))
forecast = column[forecastdates[days_out]]
true = forecast_df[,1][forecastdates[days_out]]
error = forecast - true
trues = c(trues, true)
forecasts = c(forecasts, forecast)
errors = c(errors, error)
}
return(errors)
}
perchange = function(vec){
per = rep(NA,length(vec))
for(ii in 2:length(vec)){
per[ii] = (vec[ii]-vec[ii-1])/vec[ii-1] * 100
}
per
}
#libraries
library(ggplot2)
# data
source('~/Desktop/code for Tarini/functions.R')
H = read.csv('~/Desktop/code for Tarini/H-forecasts.csv',row.names = 1)
ICU = read.csv('~/Desktop/code for Tarini/ICU-forecasts.csv',row.names = 1)
D = read.csv('~/Desktop/code for Tarini/D-forecasts.csv',row.names = 1)
colnames(H) = sub("^X", "", colnames(H))
colnames(ICU) = sub("^X", "", colnames(ICU))
colnames(D) = sub("^X", "", colnames(D))
# plots and analysis
H.summary = generate.plots(datframe = H,'hospitalizations')
H.summary
ICU.summary = generate.plots(datframe = ICU,'ICU')
D.summary = generate.plots(datframe = D, 'D')
H.error = H.summary$errors
ICU.error = ICU.summary$errors
D.error = D.summary$errors
D.error
D.error[,1]
D.error[1,]
H.perchange = H.summary$perchange
ICU.perchange = ICU.summary$perchange
D.perchange = D.summary$perchange
# tables (looking at error matrices)
matplot(t(H.error),type='l',col='gray',lwd=1,lty=1)
matplot(t(ICU.error),type='l',col='gray',lwd=1,lty=1)
matplot(t(D.error),type='l',col='gray',lwd=1,lty=1)
#read in vaccinations CSV
vax = read.csv("~/Desktop/code for Tarini/Vax_Dose_By_Week.csv")
###HOSP
#merge based on dates (adjusted in H csv)
typeof(H$Dates)
typeof(vax$Dates)
hosp_vax = merge(H, vax, by="Dates")
head(hosp_vax)
#plot doses and hospitalization rates together
plot(hosp_vax$Dates,hosp_vax$Total_Doses,type="l",col="red")
lines(hosp_vax$Dates,hosp_vax$true_H,col="green")
plot(hosp_vax$Dates,hosp_vax$true_H,type="l",col="green")
#linear model
lm_hosp = lm(true_H~Total_Doses, data = hosp_vax)
summary(lm_hosp)
#find first and last vaccination dates to subset
min(vax$Dates)
max(vax$Dates)
#subset after the first vax dose
hosp_vax2 = subset(hosp_vax, Dates > 20201227)
#linear model based on subset
lm_hosp2 = lm(true_H~Total_Doses, data = hosp_vax2)
summary(lm_hosp2)
#plot subsetted data
plot(hosp_vax2$Dates,hosp_vax2$Total_Doses,type="l",col="red")
lines(hosp_vax2$Dates,hosp_vax2$true_H,col="green")
plot(hosp_vax2$Dates,hosp_vax2$true_H,type="l",col="green")
#create a lagged variable of the hospitalizations to account for immunization time
hosp_vax$lag = lag(hosp_vax$true_H, 14)
#plot the vaccinations and lagged hospitalizations
plot(hosp_vax$Dates,hosp_vax$Total_Doses,type="l",col="red")
lines(hosp_vax$Dates,hosp_vax$lag,col="green")
plot(hosp_vax$Dates,hosp_vax$lag,type="l",col="green")
#linear model of hospitalizations (y) vs vaccinations (x)
lm_hosp3 = lm(lag~Total_Doses, data = hosp_vax)
summary(lm_hosp3)
#add errors to dataset
hosp_vax$error1 = H.error[,1]
H.error[,1]
D.error[,1]
df1 = as.data.frame(D.error[,1])
df1
df2 = as.data.frame(hosp_vax)
df2
zz <- merge(df1, df2, all = TRUE)
zz[is.na(zz)] <- 0
zz
head(zz)
View(zz)
df1 = as.data.frame(H.error[,1])
df2 = as.data.frame(hosp_vax)
zz <- merge(df1, df2, all = TRUE)
zz[is.na(zz)] <- 0
zz
View(zz)
df1 = as.data.frame(H.error[,1])
df2 = as.data.frame(hosp_vax)
zz <- merge(df1, df2, all = TRUE)
View(zz)
is.na(zz)
sum(is.na(zz))
#plot doses and hospitalization rates together
plot(hosp_vax$Dates,hosp_vax$Total_Doses,type="l",col="red")
lines(hosp_vax$Dates,hosp_vax$true_H,col="green")
plot(hosp_vax$Dates,hosp_vax$true_H,type="l",col="green")
#linear model
lm_hosp = lm(true_H~Total_Doses, data = hosp_vax)
summary(lm_hosp)
#subset after the first vax dose
hosp_vax2 = subset(hosp_vax, Dates > 20201227)
#linear model based on subset
lm_hosp2 = lm(true_H~Total_Doses, data = hosp_vax2)
summary(lm_hosp2)
#plot subsetted data
plot(hosp_vax2$Dates,hosp_vax2$Total_Doses,type="l",col="red")
lines(hosp_vax2$Dates,hosp_vax2$true_H,col="green")
plot(hosp_vax2$Dates,hosp_vax2$true_H,type="l",col="green")
#create a lagged variable of the hospitalizations to account for immunization time
hosp_vax$lag = lag(hosp_vax$true_H, 14)
#plot the vaccinations and lagged hospitalizations
plot(hosp_vax$Dates,hosp_vax$Total_Doses,type="l",col="red")
lines(hosp_vax$Dates,hosp_vax$lag,col="green")
plot(hosp_vax$Dates,hosp_vax$lag,type="l",col="green")
#linear model of hospitalizations (y) vs vaccinations (x)
lm_hosp3 = lm(lag~Total_Doses, data = hosp_vax)
summary(lm_hosp3)
#add errors to dataset
hosp_vax$error1 = H.error[,1]
#lag the error
hosp_vax$lag_error1 = lag(hosp_vax$error1, 14)
#linear model with errors and lagged data
lm_hosp4 = lm(lag_error1~Total_Doses, data = hosp_vax)
#add errors to dataset
df1 = as.data.frame(H.error[,1])
df2 = as.data.frame(hosp_vax)
zz <- merge(df1, df2, all = TRUE)
#lag the error
zz$lag_error1 = lag(zz$H.error[,1], 14)
head(zz)
zz$lag_error1 = lag(zz$`H.error[, 1]`, 14)
#linear model with errors and lagged data
lm_hosp4 = lm(lag_error1~Total_Doses, data = zz)
summary(lm_hosp4)
###ICU
#merge based on dates (adjusted in ICU csv)
typeof(ICU$Dates)
typeof(vax$Dates)
ICU_vax = merge(ICU, vax, by="Dates")
head(ICU_vax)
#plot doses and ICU rates together
plot(ICU_vax$Dates,ICU_vax$Total_Doses,type="l",col="red")
lines(ICU_vax$Dates,ICU_vax$true_ICU,col="green")
plot(ICU_vax$Dates,ICU_vax$true_ICU,type="l",col="green")
#linear model
lm_ICU = lm(true_ICU~Total_Doses, data = ICU_vax)
summary(lm_ICU)
#subset after the first vax dose
ICU_vax2 = subset(ICU_vax, Dates > 20201227)
#linear model based on subset
lm_ICU2 = lm(true_ICU~Total_Doses, data = ICU_vax2)
summary(lm_ICU2)
#plot subsetted data
plot(ICU_vax2$Dates,ICU_vax2$Total_Doses,type="l",col="red")
lines(ICU_vax2$Dates,ICU_vax2$true_ICU,col="green")
plot(ICU_vax2$Dates,ICU_vax2$true_ICU,type="l",col="green")
#create a lagged variable of True_ICU to account for immunization time
ICU_vax$lag = lag(ICU_vax$true_ICU, 14)
#plot the vaccinations and lagged ICU
plot(ICU_vax$Dates,ICU_vax$Total_Doses,type="l",col="red")
lines(ICU_vax$Dates,ICU_vax$lag,col="green")
plot(ICU_vax$Dates,ICU_vax$lag,type="l",col="green")
#linear model of ICU (y) vs vaccinations (x)
lm_ICU3 = lm(lag~Total_Doses, data = ICU_vax)
summary(lm_ICU3)
df3 = as.data.frame(ICU.error[,1])
df4 = as.data.frame(ICU_vax)
zz2 <- merge(df3, df4, all = TRUE)
#lag the error
zz2$lag_error1 = lag(zz2$`ICU.error[, 1]`, 14)
#linear model with errors and lagged data
lm_hosp4 = lm(lag_error1~Total_Doses, data = zz2)
summary(lm_hosp4)
e
###DEATH
#merge based on dates (adjusted in D csv)
typeof(D$Dates)
typeof(vax$Dates)
D_vax = merge(D, vax, by="Dates")
head(D_vax)
#plot doses and death rates together
plot(D_vax$Dates,D_vax$Total_Doses,type="l",col="red")
lines(D_vax$Dates,D_vax$true_D,col="green")
plot(D_vax$Dates,D_vax$true_D,type="l",col="green")
#linear model
lm_D = lm(true_D~Total_Doses, data = D_vax)
summary(lm_D)
#subset after the first vax dose
D_vax2 = subset(D_vax, Dates > 20201227)
#linear model based on subset
lm_D2 = lm(true_D~Total_Doses, data = D_vax2)
summary(lm_D2)
#plot subsetted data
plot(D_vax2$Dates,D_vax2$Total_Doses,type="l",col="red")
lines(D_vax2$Dates,D_vax2$true_D,col="green")
plot(D_vax2$Dates,D_vax2$true_D,type="l",col="green")
#create a lagged variable of the deaths to account for immunization time
D_vax$lag = lag(D_vax$true_D, 14)
#plot the vaccinations and lagged deaths
plot(D_vax$Dates,D_vax$Total_Doses,type="l",col="red")
lines(D_vax$Dates,D_vax$lag,col="green")
plot(D_vax$Dates,D_vax$lag,type="l",col="green")
#linear model of deaths (y) vs vaccinations (x)
lm_D3 = lm(lag~Total_Doses, data = D_vax)
summary(lm_D3)
lm_ICU3 = lm(lag_error1~Total_Doses, data = zz2)
summary(lm_ICU3)
df5 = as.data.frame(D.error[,1])
df6 = as.data.frame(D_vax)
zz <- merge(df5, df6, all = TRUE)
#lag the error
zz3$lag_error1 = lag(zz3$`D.error[, 1]`, 14)
df5 = as.data.frame(D.error[,1])
df6 = as.data.frame(D_vax)
zz3 <- merge(df5, df6, all = TRUE)
#lag the error
zz3$lag_error1 = lag(zz3$`D.error[, 1]`, 14)
#linear model with errors and lagged data
lm_D4 = lm(lag_error1~Total_Doses, data = zz3)
summary(D4)
zz3$lag_error1 = lag(zz3$`D.error[, 1]`, 14)
#linear model with errors and lagged data
lm_D4 = lm(lag_error1~Total_Doses, data = zz3)
summary(lm_D4)
#linear model of deaths (y) vs vaccinations (x)
lm_D3 = lm(lag~Total_Doses, data = D_vax)
summary(lm_D3)
#add errors to dataset
df5 = as.data.frame(D.error[,1])
df6 = as.data.frame(D_vax)
zz3 <- merge(df5, df6, all = TRUE)
#lag the error
zz3$lag_error1 = lag(zz3$`D.error[, 1]`, 14)
#linear model with errors and lagged data
lm_D4 = lm(lag_error1~Total_Doses, data = zz3)
summary(lm_D4)
summary(lm_D3)
lm_D3 = lm(lag~Total_Doses, data = D_vax)
summary(lm_D3)
###DEATH
#merge based on dates (adjusted in D csv)
typeof(D$Dates)
typeof(vax$Dates)
D_vax = merge(D, vax, by="Dates")
head(D_vax)
#linear model
lm_D = lm(true_D~Total_Doses, data = D_vax)
summary(lm_D)
#subset after the first vax dose
D_vax2 = subset(D_vax, Dates > 20201227)
#linear model based on subset
lm_D2 = lm(true_D~Total_Doses, data = D_vax2)
summary(lm_D2)
#create a lagged variable of the deaths to account for immunization time
D_vax$lag = lag(D_vax$true_D, 14)
#linear model of deaths (y) vs vaccinations (x)
lm_D3 = lm(lag~Total_Doses, data = D_vax)
summary(lm_D3)
D_vax
view(D_vax)
View(lm_D3)
View(D_vax)
summary(lm_D3)
#linear model of deaths (y) vs vaccinations (x)
lm_D3 = lm(lag~Total_Doses, data = D_vax)
summary(lm_D3)
as.data.frame(D.error)
df_allD = as.data.frame(D.error)
zz4 <- merge(df_allD, df6, all = TRUE)
head(zz4)
getwd()
setwd("/Users/tarinisudhakar/Documents/Coding/eco395m-exercises/exercise_2")
library(ggplot2)
library(tidyverse)
library(dplyr)
library(rsample)
library(caret)
library(foreach)
library(modelr)
credit <- read.csv("german_credit.csv")
str(credit)
tbl <- with(credit, table(history, Default))
ggplot(as.data.frame(tbl), aes(factor(Default), Freq, fill = history)) +
geom_col(position = 'dodge') +
xlab = "Credit History"
ggplot(as.data.frame(tbl), aes(factor(Default), Freq, fill = history)) +
geom_col(position = 'dodge') +
xlab = "Credit History"
ggplot(as.data.frame(tbl), aes(factor(Default), Freq, fill = history)) +
geom_col(position = 'dodge') +
xlab = "Credit History"
ggplot(as.data.frame(tbl), aes(factor(Default), Freq, fill = history)) +
geom_col(position = 'dodge')
install.packages("wesanderson")
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(rsample)
library(caret)
library(foreach)
library(modelr)
library(wesanderson)
ggplot(as.data.frame(tbl), aes(factor(Default), Freq, fill = history)) +
geom_col(position = 'dodge') +
scale_fill_manual(values=wes_palette(n=3, name="GrandBudapest")) +
labs(y = "Frequency", x = "Default (0 for no defaults, 1 for defaults)")
ggplot(as.data.frame(tbl), aes(factor(Default), Freq, fill = history)) +
geom_col(position = 'dodge') +
scale_fill_manual(values=wes_palette(n=3, name="GrandBudapest2")) +
labs(y = "Frequency", x = "Default (0 for no defaults, 1 for defaults)")
ggplot(as.data.frame(tbl), aes(factor(Default), Freq, fill = history)) +
geom_col(position = 'dodge') +
scale_fill_manual(values=wes_palette(n=3, name="Darjeeling")) +
labs(y = "Frequency", x = "Default (0 for no defaults, 1 for defaults)")
ggplot(as.data.frame(tbl), aes(factor(Default), Freq, fill = history)) +
geom_col(position = 'dodge') +
scale_fill_manual(values=wes_palette(n=3, name="Darjeeling1")) +
labs(y = "Frequency", x = "Default (0 for no defaults, 1 for defaults)")
ggplot(as.data.frame(tbl), aes(factor(Default), Freq, fill = history)) +
geom_col(position = 'dodge') +
scale_fill_manual(values=wes_palette(n=3, name="Darjeeling1")) +
labs(y = "Frequency", x = "Loan default") +
theme_bw()
ggplot(as.data.frame(tbl), aes(factor(Default), Freq, fill = history)) +
geom_col(position = 'dodge') +
scale_fill_manual(values=wes_palette(n=3, name="Darjeeling1")) +
labs(y = "Frequency", x = "Loan default") +
theme_bw() + element_blank()
ggplot(as.data.frame(tbl), aes(factor(Default), Freq, fill = history)) +
geom_col(position = 'dodge') +
scale_fill_manual(values=wes_palette(n=3, name="Darjeeling1")) +
labs(y = "Frequency", x = "Loan default") +
theme_bw() + element_blank())
ggplot(as.data.frame(tbl), aes(factor(Default), Freq, fill = history)) +
geom_col(position = 'dodge') +
scale_fill_manual(name = "Credit history", values=wes_palette(n=3, name="Darjeeling1")) +
labs(y = "Frequency", x = "Loan default", caption = "0 indicates no default, 1 indicates default") +
theme_bw()
ggplot(as.data.frame(tbl), aes(factor(Default), Freq, fill = history)) +
geom_col(position = 'dodge') +
scale_fill_manual(name = "Credit history", values=wes_palette(n=3, name="Darjeeling1")) +
labs(y = "Frequency", x = "Loan default", subtitle = "0 indicates no default, 1 indicates default") +
theme_bw()
ggplot(as.data.frame(tbl), aes(factor(Default), Freq, fill = history)) +
geom_col(position = 'dodge') +
theme(plot.caption = element_text(hjust = 0.5))
scale_fill_manual(name = "Credit history", values=wes_palette(n=3, name="Darjeeling1")) +
labs(y = "Frequency", x = "Loan default", caption = "0 indicates no default, 1 indicates default") +
theme_bw()
ggplot(as.data.frame(tbl), aes(factor(Default), Freq, fill = history)) +
geom_col(position = 'dodge') +
theme(plot.caption = element_text(hjust = 0.5)) +
scale_fill_manual(name = "Credit history", values=wes_palette(n=3, name="Darjeeling1")) +
labs(y = "Frequency", x = "Loan default", caption = "0 indicates no default, 1 indicates default") +
theme_bw()
ggplot(as.data.frame(tbl), aes(factor(Default), Freq, fill = history)) +
geom_col(position = 'dodge') +
labs(y = "Frequency", x = "Loan default", caption = "0 indicates no default, 1 indicates default") +
theme(plot.caption = element_text(hjust = 0.5)) +
scale_fill_manual(name = "Credit history", values=wes_palette(n=3, name="Darjeeling1")) +
theme_bw()
ggplot(as.data.frame(tbl), aes(factor(Default), Freq, fill = history)) +
geom_col(position = 'dodge') +
labs(y = "Frequency", x = "Loan default", title ="Default probability by credit history",
caption = "0 indicates no default, 1 indicates   default") +
scale_fill_manual(name = "Credit history", values=wes_palette(n=3, name="Darjeeling1")) +
theme_bw()
tbl <- with(credit, table(history, Default))
tbl
ggplot(as.data.frame(tbl), aes(factor(Default), Freq, fill = history)) +
geom_col(position = 'dodge') +
labs(y = "Frequency", x = "Loan default", title ="Default probability by credit history",
caption = "0 indicates no default, 1 indicates default") +
scale_fill_manual(name = "Credit history", values=wes_palette(n=3, name="Darjeeling1")) +
theme_bw()
ggplot(as.data.frame(tbl), aes(factor(Default), Freq, fill = history)) +
geom_col(position = 'dodge') +
labs(y = "Frequency", x = "Loan default", title ="Default probability by credit history",
caption = "0 indicates no default, 1 indicates default") +
scale_fill_manual(name = "Credit history", values=wes_palette(n=3, name="GrandBudapest1")) +
theme_bw()
credit_split = initial_split(credit, prop=0.8)
credit_train = training(credit_split)
credit_test  = testing(credit_split)
logit_credit = glm(Default ~ duration + amount + installment + age
+ history + purpose + foreign, data=credit_train,
family='binomial')
summary(logit_credit)
credittest = mutate(credit_test, yhat = predict(logit_credit, credit_test,
type='response'))
ggplot(credittest) +
geom_jitter(aes(x=factor(Default), y=yhat), width=0.1, alpha=0.2) +
labs(title="Test-set predicted probabilities", y = "P(Default | x)", x="History?") +
stat_summary(aes(x=factor(Default), y=yhat), fun='mean', col='red', size=1)
coef(logit_credit)
coef(logit_credit) %>% round(2)
summary(credit_train)
credit_train$history
credit_train$purpose
describe(creidt)
describe(credit)
credit <- read.csv("german_credit.csv")
str(credit)
tbl <- with(credit, table(history, Default))
tbl
##Bar plot for default probability by credit history
ggplot(as.data.frame(tbl), aes(factor(Default), Freq, fill = history)) +
geom_col(position = 'dodge') +
labs(y = "Frequency", x = "Loan default", title ="Default probability by credit history",
caption = "0 indicates no default, 1 indicates default") +
scale_fill_manual(name = "Credit history", values=wes_palette(n=3, name="GrandBudapest1")) +
theme_bw()
##Splitting data into train and test set
credit_split = initial_split(credit, prop=0.8)
credit_train = training(credit_split)
credit_test  = testing(credit_split)
logit_credit = glm(Default ~ duration + amount + installment + age
+ history + purpose + foreign, data=credit_train,
family='binomial')
credittest = mutate(credit_test, yhat = predict(logit_credit, credit_test,
type='response'))
ggplot(credittest) +
geom_jitter(aes(x=factor(Default), y=yhat), width=0.1, alpha=0.2) +
labs(title="Test-set predicted probabilities", y = "P(Default | x)", x="Default?") +
stat_summary(aes(x=factor(Default), y=yhat), fun='mean', col='red', size=1)
coef(logit_credit) %>% round(2)
